{"version":3,"sources":["components/SettingsDialog.js","assets/soundEffects/click.mp4","assets/soundEffects/complete.mp4","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["makeStyles","avatar","backgroundColor","blue","color","SettingsDialog","props","onClose","open","pomodoroTime","shortBreakTime","longBreakTime","longBreakInterval","autoStartRound","setPomodoroTime","setShortBreakTime","setLongBreakTime","setLongBreakInterval","setAutoStartRound","useState","tempPomodoroTime","setTempPomodoroTime","tempShortBreakTime","setTempShortBreakTime","tempLongBreakTime","setTempLongBreakTime","tempLongBreakInterval","setTempLongBreakInterval","tempAutoStartRound","setTempAutoStartRound","pomodoroValueError","setPomodoroValueError","shortBreakValueError","setShortBreakValueError","longBreakValueError","setLongBreakValueError","longBreakIntervalValueError","setLongBreakIntervalValueError","useEffect","Dialog","onEnter","scroll","aria-labelledby","DialogTitle","id","DialogContent","Grid","container","spacing","justify","item","sm","xs","style","textAlign","TextField","width","label","type","InputLabelProps","shrink","margin","error","helperText","variant","defaultValue","onChange","e","parseInt","target","value","min","Divider","FormControlLabel","control","InputProps","inputProps","max","labelPlacement","Switch","checked","name","DialogActions","Button","onClick","App","muiTheme","createMuiTheme","responsiveFontSizes","theme","useSound","clickSfx","playClickSfx","completeSfx","playCompleteSfx","timerType","setTimerType","localStorage","getItem","Timer","timer","time","setTime","clockMinutes","setClockMinutes","clockSeconds","setClockSeconds","isPaused","setIsPaused","pomodorosComplete","setPomodorosComplete","secondsPassed","setSecondsPassed","zeroPad","num","places","String","padStart","PlayPauseIcon","fontSize","getTimeValues","minutes","seconds","addEventListener","hours","document","title","wasCompleted","stop","start","countdown","startValues","reset","pause","minutesGained","setItem","mins","secs","React","setOpen","className","minHeight","Container","maxWidth","display","justifyContent","marginBottom","marginTop","fontFamily","startIcon","Card","CardContent","ButtonGroup","aria-label","styles","buildStyles","pathColor","ThemeProvider","Typography","IconButton","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.b7325479.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { blue } from '@material-ui/core/colors';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst useStyles = makeStyles({\r\n  avatar: {\r\n    backgroundColor: blue[100],\r\n    color: blue[600],\r\n  },\r\n});\r\n\r\nfunction SettingsDialog(props) {\r\n\r\n    const { onClose, open, pomodoroTime, shortBreakTime, longBreakTime, longBreakInterval, autoStartRound, setPomodoroTime, setShortBreakTime, setLongBreakTime, setLongBreakInterval, setAutoStartRound } = props;\r\n\r\n    const [tempPomodoroTime, setTempPomodoroTime] = useState(pomodoroTime);\r\n    const [tempShortBreakTime, setTempShortBreakTime] = useState(shortBreakTime);\r\n    const [tempLongBreakTime, setTempLongBreakTime] = useState(longBreakTime);\r\n    const [tempLongBreakInterval, setTempLongBreakInterval] = useState(longBreakInterval)\r\n    const [tempAutoStartRound, setTempAutoStartRound] = useState(autoStartRound)\r\n\r\n    const [pomodoroValueError, setPomodoroValueError] = useState(false);\r\n    const [shortBreakValueError, setShortBreakValueError] = useState(false);\r\n    const [longBreakValueError, setLongBreakValueError] = useState(false);\r\n    const [longBreakIntervalValueError, setLongBreakIntervalValueError] = useState(false);\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        if((tempPomodoroTime >= 1) && (tempPomodoroTime <= 60)){\r\n            setPomodoroValueError(false)\r\n        }else{\r\n            setPomodoroValueError(true)\r\n        }\r\n\r\n        if((tempShortBreakTime >= 1) && (tempShortBreakTime <= 60)){\r\n            setShortBreakValueError(false)\r\n        }else{\r\n            setShortBreakValueError(true)\r\n        }\r\n\r\n        if((tempLongBreakTime >= 1) && (tempLongBreakTime <= 60)){\r\n            setLongBreakValueError(false)\r\n        }else{\r\n            setLongBreakValueError(true)\r\n        }\r\n\r\n        if(tempLongBreakInterval > 0){\r\n            setLongBreakIntervalValueError(false)\r\n        }else{\r\n            setLongBreakIntervalValueError(true)\r\n        }\r\n\r\n\r\n    }, [tempPomodoroTime, tempShortBreakTime, tempLongBreakTime, tempLongBreakInterval]);\r\n\r\n    const handleEnter = function(){\r\n        setTempPomodoroTime(pomodoroTime)\r\n        setTempShortBreakTime(shortBreakTime)\r\n        setTempLongBreakTime(longBreakTime)\r\n        setTempLongBreakInterval(longBreakInterval)\r\n    }\r\n\r\n    const handleClose = () => {\r\n        onClose();\r\n    };\r\n\r\n    const onSave = function(){\r\n\r\n        if ( (!pomodoroValueError) && (!shortBreakValueError) && (!longBreakValueError) && (!longBreakIntervalValueError)){\r\n            setPomodoroTime(tempPomodoroTime)\r\n            setShortBreakTime(tempShortBreakTime)\r\n            setLongBreakTime(tempLongBreakTime)\r\n            setLongBreakInterval(tempLongBreakInterval)\r\n            setAutoStartRound(tempAutoStartRound)\r\n\r\n\r\n            onClose();\r\n        }\r\n\r\n        \r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleClose} onEnter={handleEnter} scroll=\"body\" aria-labelledby=\"settings-dialog-title\" open={open} >\r\n            <DialogTitle id=\"settings-dialog-title\">Settings</DialogTitle>\r\n            \r\n\r\n            <DialogContent >\r\n\r\n                <div>\r\n                    \r\n                    <Grid container spacing={1} justify=\"center\">\r\n                        <Grid item sm={4} xs={12} style={{textAlign: \"center\"}}>\r\n                            <TextField\r\n                                style={{width: \"100%\"}}\r\n                                label=\"Pomodoro Time\"\r\n                                type=\"number\"\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n\r\n                                margin=\"normal\"\r\n                                error = {pomodoroValueError}\r\n                                helperText=\"Value must be from 1 to 60.\"\r\n                                variant=\"outlined\"\r\n                                defaultValue={pomodoroTime}\r\n                                onChange={(e)=>{ setTempPomodoroTime(parseInt(e.target.value)) }}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item sm={4} xs={12} style={{textAlign: \"center\"}}>\r\n                            <TextField\r\n                                style={{width: \"100%\"}}\r\n                                label=\"Short Break Time\"\r\n                                type=\"number\"\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                                \r\n                                margin=\"normal\"\r\n                                error = {shortBreakValueError}\r\n                                helperText=\"Value must be from 1 to 60.\"\r\n                                min=\"1\"\r\n                                variant=\"outlined\"\r\n                                defaultValue={shortBreakTime}\r\n                                onChange={(e)=>{ setTempShortBreakTime(parseInt(e.target.value))}}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item sm={4} xs={12} style={{textAlign: \"center\"}}>\r\n                            <TextField\r\n                                style={{width: \"100%\"}}\r\n                                label=\"Long Break Time\"\r\n                                type=\"number\"\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                                margin=\"normal\"\r\n                                error = {longBreakValueError}\r\n                                helperText=\"Value must be from 1 to 60.\"\r\n                                variant=\"outlined\"\r\n                                defaultValue={longBreakTime}\r\n                                onChange={(e)=>{ setTempLongBreakTime(parseInt(e.target.value))}}\r\n                            />\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                    \r\n                    \r\n\r\n                    <Divider variant=\"middle\" style={{margin: \"1rem\"}}/>\r\n                        \r\n                    <div>\r\n\r\n                    <FormControlLabel\r\n                        control={\r\n                            <TextField\r\n                                width='sm'\r\n                                type=\"number\"\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                                InputProps={{\r\n                                    inputProps: { \r\n                                        max: 60, min: 1\r\n                                    }\r\n                                }}\r\n                                error={longBreakIntervalValueError}\r\n                                margin=\"normal\"\r\n                                style={{margin: \".5rem\"}}\r\n                                defaultValue={longBreakInterval}\r\n                                onChange={(e)=>{ setTempLongBreakInterval(parseInt(e.target.value))  }}\r\n                            />\r\n                        }\r\n                    \r\n                        label=\"Long Break Interval:\"\r\n                        labelPlacement=\"start\"\r\n                    />\r\n                        \r\n                        \r\n                    </div>\r\n\r\n                    <Divider variant=\"middle\" style={{margin: \"1rem\"}}/>\r\n                        \r\n                    <div>\r\n                        <FormControlLabel\r\n                            control={\r\n                            <Switch\r\n                                checked={tempAutoStartRound}\r\n                                onChange={(value)=>{setTempAutoStartRound(!tempAutoStartRound)}}\r\n                                name=\"checkedB\"\r\n                                color=\"primary\"\r\n                            />\r\n                            }\r\n                            label=\"Auto start next round?\"\r\n                            labelPlacement=\"start\"\r\n                        />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                \r\n\r\n            </DialogContent>\r\n\r\n            <DialogActions>\r\n                <Button onClick={onSave} color=\"primary\">\r\n                    Save\r\n                </Button>\r\n            </DialogActions>\r\n        \r\n        </Dialog>\r\n    );\r\n  }\r\n  \r\n  export default SettingsDialog;\r\n  ","export default __webpack_public_path__ + \"static/media/click.38da6178.mp4\";","export default __webpack_public_path__ + \"static/media/complete.8b65bc34.mp4\";","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\n\r\nimport SettingsDialog from \"./components/SettingsDialog\"\r\nimport { Divider, Typography, ButtonGroup, Button, Container } from '@material-ui/core';\r\nimport { createMuiTheme, responsiveFontSizes, ThemeProvider } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport PlayIcon from '@material-ui/icons/PlayArrowRounded';\r\nimport PauseIcon from '@material-ui/icons/PauseRounded';\r\nimport ReplayIcon from '@material-ui/icons/ReplayRounded';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\n\r\nimport Timer from 'easytimer.js';\r\nimport 'fontsource-roboto';\r\n\r\nimport useSound from 'use-sound';\r\nimport clickSfx from \"./assets/soundEffects/click.mp4\"\r\nimport completeSfx from \"./assets/soundEffects/complete.mp4\"\r\n\r\nimport {\r\n  CircularProgressbar,\r\n  CircularProgressbarWithChildren,\r\n  buildStyles\r\n} from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  const muiTheme= createMuiTheme();\r\n  const [theme, setTheme] = useState(responsiveFontSizes(muiTheme));\r\n\r\n  const [playClickSfx] = useSound(clickSfx);\r\n  const [playCompleteSfx] = useSound(completeSfx);\r\n\r\n  const [timerType, setTimerType] = useState(\"pomodoro\");\r\n  const [pomodoroTime, setPomodoroTime] = useState(localStorage.getItem('pomodoroTime') ? parseInt(localStorage.getItem('pomodoroTime')): 25);\r\n  const [shortBreakTime, setShortBreakTime] = useState(localStorage.getItem('shortBreakTime') ? parseInt(localStorage.getItem('shortBreakTime')): 5);\r\n  const [longBreakTime, setLongBreakTime] = useState(localStorage.getItem('longBreakTime') ? parseInt(localStorage.getItem('longBreakTime')): 15);\r\n\r\n  const [timer] = useState(new Timer())\r\n  const [time, setTime] = useState(pomodoroTime);\r\n  const [clockMinutes, setClockMinutes] = useState(time);\r\n  const [clockSeconds, setClockSeconds] = useState(0);\r\n  const [isPaused, setIsPaused] = useState(true);\r\n  const [longBreakInterval, setLongBreakInterval] = useState(localStorage.getItem('longBreakInterval') ? parseInt(localStorage.getItem('longBreakInterval')): 4);\r\n  const [pomodorosComplete, setPomodorosComplete] = useState(0);\r\n  const [secondsPassed, setSecondsPassed] = useState(0);\r\n\r\n  const [autoStartRound, setAutoStartRound] = useState((localStorage.getItem('autoStartRound') === \"true\") ? true: false);\r\n\r\n  const zeroPad = (num, places) => String(num).padStart(places, '0');\r\n\r\n  useEffect(() => {\r\n    \r\n    if(!isPaused){\r\n      setSecondsPassed( ((time*60)-( (clockMinutes*60)+clockSeconds)) )\r\n    }\r\n    \r\n    if ( (timer.getTimeValues().minutes<=0) && (timer.getTimeValues().seconds<=0) && (clockMinutes <= 0)){\r\n      playCompleteSfx();\r\n      \r\n      if (timerType === \"pomodoro\"){\r\n        setPomodorosComplete(pomodorosComplete + 1)\r\n\r\n        \r\n\r\n\r\n        if ( ((pomodorosComplete + 1) % longBreakInterval) === 0 ){\r\n          setTimerType(\"longBreak\")\r\n        }else{\r\n          setTimerType(\"shortBreak\")\r\n        }\r\n      }else{\r\n        setTimerType(\"pomodoro\")\r\n      }\r\n    }\r\n  }, [clockSeconds, clockMinutes]);\r\n\r\n  useEffect(() => {\r\n  }, [secondsPassed]);\r\n\r\n  useEffect(() => {\r\n    timer.addEventListener('secondsUpdated', function (e) {\r\n      setClockMinutes((timer.getTimeValues().hours*60) + timer.getTimeValues().minutes)\r\n      setClockSeconds(timer.getTimeValues().seconds)\r\n\r\n      document.title = (((timer.getTimeValues().hours*60)+timer.getTimeValues().minutes)+\":\"+zeroPad(timer.getTimeValues().seconds, 2))\r\n    });\r\n\r\n    timer.addEventListener('reset', function (e) {\r\n      setClockMinutes((timer.getTimeValues().hours*60) + timer.getTimeValues().minutes)\r\n      setClockSeconds(timer.getTimeValues().seconds)\r\n      document.title = (((timer.getTimeValues().hours*60)+timer.getTimeValues().minutes)+\":\"+zeroPad(timer.getTimeValues().seconds, 2))\r\n     \r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n\r\n    var wasCompleted = (clockMinutes<=0 && clockSeconds<=0)\r\n\r\n    timer.stop();\r\n    if (timerType === \"pomodoro\"){\r\n      setTime(pomodoroTime);\r\n      timer.start({countdown: true, startValues: {minutes: pomodoroTime}});\r\n      setSecondsPassed(0)\r\n\r\n    }else if ( timerType === \"shortBreak\"){\r\n      setTime(shortBreakTime);\r\n      timer.start({countdown: true, startValues: {minutes: shortBreakTime}});\r\n      setSecondsPassed(0)\r\n\r\n    }else{\r\n      setTime(longBreakTime);\r\n      timer.start({countdown: true, startValues: {minutes: longBreakTime}});\r\n      setSecondsPassed(0)\r\n    }\r\n\r\n    timer.reset();\r\n    timer.pause();\r\n    setIsPaused(true);\r\n\r\n    if (autoStartRound && wasCompleted){\r\n      timer.start();\r\n      setIsPaused(false);\r\n    }\r\n    \r\n\r\n  }, [timerType]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('pomodoroTime', pomodoroTime);\r\n    localStorage.setItem('shortBreakTime', shortBreakTime);\r\n    localStorage.setItem('longBreakTime', longBreakTime);\r\n\r\n    var minutesGained\r\n    if (timerType === \"pomodoro\"){\r\n      setTime(pomodoroTime)\r\n      minutesGained = pomodoroTime - time;\r\n    }else if(timerType === \"shortBreak\"){\r\n      setTime(shortBreakTime)\r\n      minutesGained = shortBreakTime - time;\r\n    }else{\r\n      setTime(longBreakTime)\r\n      minutesGained = longBreakTime - time;\r\n    }\r\n\r\n    var mins = ((timer.getTimeValues().hours*60) + timer.getTimeValues().minutes)\r\n    var secs = timer.getTimeValues().seconds\r\n\r\n    timer.stop();\r\n\r\n    if( (((mins + minutesGained)<=0) && (secs <= 0)) || ( ((mins + minutesGained)<0) ) ){\r\n      timer.start({countdown: true, startValues: {minutes: 0, seconds: 1}});\r\n      setSecondsPassed(0)\r\n    }else{\r\n      timer.start({countdown: true, startValues: {minutes: (mins + minutesGained), seconds: secs}});\r\n      setClockMinutes(mins + minutesGained)\r\n      setClockSeconds(secs) \r\n    }\r\n\r\n    if (isPaused){\r\n      timer.pause();\r\n    }\r\n    \r\n  }, [pomodoroTime, shortBreakTime, longBreakTime]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('longBreakInterval', longBreakInterval);\r\n  }, [longBreakInterval]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('autoStartRound', autoStartRound);\r\n  }, [autoStartRound]);\r\n\r\n  var resetClock = function(){\r\n    timer.stop()\r\n    playClickSfx();\r\n    setSecondsPassed(0)\r\n    timer.start({countdown: true, startValues: {minutes: time}});\r\n    timer.reset();\r\n    timer.pause();\r\n    setIsPaused(true);\r\n  }\r\n\r\n  var toggleStart = function(){\r\n    playClickSfx();\r\n    if (isPaused){\r\n      timer.start({countdown: true, startValues: {minutes: time}});\r\n      setIsPaused(false);\r\n    }else{\r\n      timer.pause();\r\n      setIsPaused(true);\r\n    }\r\n  }\r\n\r\n\r\n  function PlayPauseIcon(props) {\r\n    if (isPaused) {\r\n      return <PlayIcon style={{ fontSize: 60 }}/>\r\n    }\r\n    return <PauseIcon style={{ fontSize: 60 }}/>\r\n  }\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (value) => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\" style={{ minHeight: \"100%\"}} >\r\n      <Container  maxWidth=\"md\">\r\n\r\n        <div style={{ textAlign: \"center\"}}>\r\n\r\n          <div style={{display: \"flex\", justifyContent: \"space-between\", marginBottom: \"auto\", marginTop: \"auto\"}}>\r\n\r\n            <h1 style={{fontFamily: 'Roboto', color: \"#3f51b5\"}}>\r\n              Pomodoro\r\n            </h1>\r\n\r\n            <Button  color=\"primary\" startIcon={<SettingsIcon />} style={{margin: \"1rem\"}} onClick={handleClickOpen} variant=\"contained\">Settings</Button>\r\n           \r\n\r\n          </div>\r\n\r\n          <Card  style={{backgroundColor:\"whitesmoke\"}}>\r\n            <CardContent>\r\n              <ButtonGroup variant=\"contained\" aria-label=\"contained primary button group\" style={{marginBottom: \"1rem\", width: \"100%\"}}>\r\n                <Button onClick={()=>{setTimerType(\"pomodoro\")}} style={{width: \"100%\"}} color={timerType === \"pomodoro\"? \"primary\": \"default\"}>Pomodoro</Button>\r\n                <Button onClick={()=>{setTimerType(\"shortBreak\")}} style={{width: \"100%\"}} color={timerType === \"shortBreak\"? \"primary\": \"default\"}>Short Break</Button>\r\n                <Button onClick={()=>{setTimerType(\"longBreak\")}} style={{width: \"100%\"}} color={timerType === \"longBreak\"? \"primary\": \"default\"}>Long Break</Button>\r\n              </ButtonGroup>\r\n\r\n              \r\n\r\n              <CircularProgressbarWithChildren\r\n                value={100-(( (secondsPassed)/(time*60))*100)}\r\n                styles={buildStyles({\r\n                  pathColor: \"#3f51b5\",\r\n                  // trailColor: \"#858585\"\r\n                })}\r\n                >\r\n                \r\n                <ThemeProvider theme={theme}>\r\n                  <Typography variant='h1'style={{color: \"black\"}}> \r\n                    {clockMinutes} : {zeroPad(clockSeconds, 2)} \r\n                  </Typography>\r\n                </ThemeProvider>\r\n                \r\n\r\n\r\n              </CircularProgressbarWithChildren>\r\n\r\n              <IconButton aria-label=\"PlayPause\"  onClick={toggleStart}>\r\n                <PlayPauseIcon/>\r\n              </IconButton>\r\n              <IconButton aria-label=\"Replay\" onClick={resetClock}><ReplayIcon style={{ fontSize: 60 }}/></IconButton>\r\n\r\n            </CardContent>\r\n          </Card>\r\n\r\n        </div>\r\n      </Container>\r\n\r\n      <SettingsDialog \r\n          pomodoroTime={pomodoroTime}\r\n          shortBreakTime={shortBreakTime}\r\n          longBreakTime={longBreakTime}\r\n          longBreakInterval={longBreakInterval}\r\n          autoStartRound={autoStartRound}\r\n\r\n          setPomodoroTime={setPomodoroTime}\r\n          setShortBreakTime={setShortBreakTime}\r\n          setLongBreakTime={setLongBreakTime}\r\n          setLongBreakInterval={setLongBreakInterval}\r\n          setAutoStartRound={setAutoStartRound}\r\n\r\n          open={open} \r\n          onClose={handleClose} />\r\n     \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}